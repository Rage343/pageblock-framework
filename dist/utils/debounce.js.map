{"version":3,"sources":["utils/debounce.js"],"names":[],"mappings":";;;;;;YAagB;;;;;;;;;;;;;;AAAT,aAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,SAA9B,EAAyC;AAC5C,YAAI,OAAJ,CAD4C;AAE5C,eAAO,YAAW;AACd,gBAAI,UAAU,IAAV;gBAAgB,OAAO,SAAP,CADN;AAEd,gBAAI,QAAQ,SAAR,KAAQ,GAAW;AACnB,0BAAU,IAAV,CADmB;AAEnB,oBAAI,CAAC,SAAD,EAAY,KAAK,KAAL,CAAW,OAAX,EAAoB,IAApB,EAAhB;aAFQ,CAFE;AAMd,gBAAI,UAAU,aAAa,CAAC,OAAD,CANb;AAOd,yBAAa,OAAb,EAPc;AAQd,sBAAU,WAAW,KAAX,EAAkB,IAAlB,CAAV,CARc;AASd,gBAAI,OAAJ,EAAa,KAAK,KAAL,CAAW,OAAX,EAAoB,IAApB,EAAb;SATG,CAFqC;KAAzC","file":"utils/debounce.js","sourcesContent":["/**\n * Debounce\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n *\n * http://davidwalsh.name/javascript-debounce-function\n *\n * @param {Function} func     [function to debounce]\n * @param {Number} wait       [time to wait]\n * @param {Boolean} immediate []\n */\nexport function debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n"],"sourceRoot":"/source/"}